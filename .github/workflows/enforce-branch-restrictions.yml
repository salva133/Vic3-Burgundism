name: Enforce PR Branch Rules and Bump Version

on:
  pull_request:
    branches:
      - master
      - testing
      - hotfix

  workflow_dispatch:  # Dies erlaubt manuelle Trigger
    inputs:
      action_type:
        description: 'Choose version bump type: patch, minor, or major'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  check_master_branch:
    runs-on: ubuntu-latest
    if: github.base_ref == 'master'
    steps:
      - name: Check if PR is from 'testing'
        if: github.head_ref != 'testing' && github.head_ref != 'hotfix'
        run: |
          echo "Pull requests to 'master' are only allowed from 'testing' or 'hotfix'."
          exit 1

  allow_to_testing:
    runs-on: ubuntu-latest
    if: github.base_ref == 'testing' || github.base_ref == 'hotfix'
    steps:
      - name: Allow PR to 'testing'
        run: echo "Pull request to 'testing' or 'hotfix' allowed."

  bump_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Determine version bump
        run: |
          FILE="metadata.json"
          VERSION=$(grep '"version"' $FILE | sed 's/[^0-9.]//g')
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          if [ "${{ github.event.inputs.action_type }}" == "patch" ]; then
            NEW_PATCH=$(printf "%03d" $((PATCH + 1)))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          elif [ "${{ github.event.inputs.action_type }}" == "minor" ]; then
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR.000"
          elif [ "${{ github.event.inputs.action_type }}" == "major" ]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_VERSION="$NEW_MAJOR.0.000"
          fi

          sed -i "s/\"version\": \"$VERSION\"/\"version\": \"$NEW_VERSION\"/" $FILE
          echo "Updated version to $NEW_VERSION"

      - name: Commit and Push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add metadata.json
          git commit -m "raised version to $NEW_VERSION"
          git push origin ${{ github.head_ref }}
